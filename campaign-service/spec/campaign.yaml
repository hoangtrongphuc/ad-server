openapi: "3.0.0"
info:
  description: "Microservice backbone"
  version: "1.0.0"
  title: "Specification microservice"
  termsOfService: "https://mplbrother.com/term"
  contact:
    email: "dr.hoangphuc@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags: 
  - name: 'movie'
    description: 'Movie API'
servers:
  - url: 'https://mplbrother.com'
    description: 'Production'
  - url: 'https://abc.com'
    description: 'Staging'
paths:
  /movies/{movieId}:
    get:
      tags:
        - 'movie'
      summary: 'Get movie by Id'
      parameters:
        - in: path
          name: movieId
          description: Id of movie
          schema:
            type: string
            format: date
      responses:
        200:
          description: 'OK'
  /movies:
    get: 
      tags: 
        - 'movie'
      summary: 'Get all movies'
      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Array of movies
          content: 
            application/json:
              schema: 
                oneOf:
                 - $ref: '#/components/schemas/Movies'
                 - $ref: '#/components/schemas/Error'
                  
    post:
      tags: 
        - 'movie'
      summary: 'Add new movie'
      security:
        - petstore_auth:
          - "write:pets"
          - "read:pets"
      parameters: 
        - in: body
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: '#/components/schemas/Movie'
      responses:
        200:
          description: 'OK'
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-TOKEN
    OAuth:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow.
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            read_movies: read your movies
            write_movies: modify movie in your account
        clientCredentials: 
          tokenUrl: https://api.gettyimages.com/oauth2/token/
          scopes: {}
        password: 
          tokenUrl: https://api.getbase.com/oauth2/token
          scopes: 
            read: Grant read-only access to all your data except for the account and user info
            write: Grant write-only access to all your data except for the account and user info
            profile: Grant read-only access to the account and user info only
        authorizationCode:
          authorizationUrl: https://slack.com/oauth/authorize
          tokenUrl: https://slack.com/api/oauth.access
          scopes:
            users:read: Read user information
            users:write: Modify user information
            im:read: Read messages
            im:write: Write messages
            im:history: Access the message archive
            search:read: Search messages, files, and so on
  schemas:
    Movie:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: "[a-z0-9]{8,64}"
          minLength: 8
          maxLength: 64
        tag:
          type: string
    Movies:
      type: array
      items:
        $ref: "#/components/schemas/Movie"
    Response:
      required:
        - data
      properties:
        data:
          oneOf:
            - type: object
            - type: array
    Error:
      required:
        - ec
        - msg
      properties:
        ec:
          type: integer
          format: int32
        msg:
          type: string